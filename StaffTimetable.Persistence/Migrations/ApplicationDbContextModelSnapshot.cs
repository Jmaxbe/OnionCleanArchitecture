// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StaffTimetable.Persistence;

#nullable disable

namespace StaffTimetable.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StaffTimetable.Domain.Common.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StaffTimetable.Domain.Common.BaseAuditableEntity", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseEntity");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasDiscriminator().HasValue("BaseAuditableEntity");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Address", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<string>("Building")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PostalCode")
                        .HasMaxLength(12)
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasIndex("OrganizationId");

                    b.HasDiscriminator().HasValue("Address");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Dictionaries.DictPost", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasDiscriminator().HasValue("DictPost");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Dictionaries.DictWorkDepartments", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("DictWorkDepartments_Name");
                        });

                    b.HasDiscriminator().HasValue("DictWorkDepartments");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Dictionaries.DictWorkingDateType", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("DictWorkingDateType_Name");
                        });

                    b.HasDiscriminator().HasValue("DictWorkingDateType");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Employee", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.FlowOfWorks", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<Guid>("DictWorkingDateTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("WorkDay")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("DictWorkingDateTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasDiscriminator().HasValue("FlowOfWorks");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.ManagedOrganizations", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("EmployeeId")
                                .HasColumnName("ManagedOrganizations_EmployeeId");

                            t.Property("OrganizationId")
                                .HasColumnName("ManagedOrganizations_OrganizationId");
                        });

                    b.HasDiscriminator().HasValue("ManagedOrganizations");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Organization", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Organization_Name");
                        });

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Salary", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<Guid>("DictPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.HasIndex("DictPostId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("EmployeeId")
                                .HasColumnName("Salary_EmployeeId");
                        });

                    b.HasDiscriminator().HasValue("Salary");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.WorkDepartments", b =>
                {
                    b.HasBaseType("StaffTimetable.Domain.Common.BaseAuditableEntity");

                    b.Property<Guid>("DictWorkDepartmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.HasIndex("DictWorkDepartmentsId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("OrganizationId")
                                .HasColumnName("WorkDepartments_OrganizationId");
                        });

                    b.HasDiscriminator().HasValue("WorkDepartments");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Address", b =>
                {
                    b.HasOne("StaffTimetable.Domain.Entities.Organization", "Organization")
                        .WithMany("Addresses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.FlowOfWorks", b =>
                {
                    b.HasOne("StaffTimetable.Domain.Entities.Dictionaries.DictWorkingDateType", "DictWorkingDateType")
                        .WithMany("FlowOfWorks")
                        .HasForeignKey("DictWorkingDateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffTimetable.Domain.Entities.Employee", "Employee")
                        .WithMany("FlowOfWorks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictWorkingDateType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.ManagedOrganizations", b =>
                {
                    b.HasOne("StaffTimetable.Domain.Entities.Employee", "Employee")
                        .WithMany("ManagedOrganizations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffTimetable.Domain.Entities.Organization", "Organization")
                        .WithMany("ManagedOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Salary", b =>
                {
                    b.HasOne("StaffTimetable.Domain.Entities.Dictionaries.DictPost", "DictPost")
                        .WithMany("Salaries")
                        .HasForeignKey("DictPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffTimetable.Domain.Entities.Employee", "Employee")
                        .WithMany("Salaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictPost");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.WorkDepartments", b =>
                {
                    b.HasOne("StaffTimetable.Domain.Entities.Dictionaries.DictWorkDepartments", "DictWorkDepartments")
                        .WithMany("WorkDepartments")
                        .HasForeignKey("DictWorkDepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaffTimetable.Domain.Entities.Organization", "Organization")
                        .WithMany("WorkDepartments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DictWorkDepartments");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Dictionaries.DictPost", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Dictionaries.DictWorkDepartments", b =>
                {
                    b.Navigation("WorkDepartments");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Dictionaries.DictWorkingDateType", b =>
                {
                    b.Navigation("FlowOfWorks");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Employee", b =>
                {
                    b.Navigation("FlowOfWorks");

                    b.Navigation("ManagedOrganizations");

                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("StaffTimetable.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ManagedOrganizations");

                    b.Navigation("WorkDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
